Copyright (C) 2004, International Business Machines and others
All Rights Reserved.
This code is published under the Common Public License.

This file describes how Ipopt can be build on Windows systems.  There
are essentially two options: Using Cygwin (a UNIX/Linux like
environment for Windows), or using the MS Visual Studio or something
similar.

1. Cygwin with MinGW:
=====================

Cygwin (www.cygwin.com) is a Unix-like environment for Windows. If you
want to use this option, you need to install a recent Cygwin version
on your machine.  Make sure that you include the gcc and g77 compilers
as well as make in your install.  (If you want to use the generated
executable outside the Cygwin environment, make sure you check the
'mingw' options in the gcc installation option.)

The file README.Cygwin has a step by step description on how to
install Cygwin to be able to compile the Ipopt AMPL executable under
Cygwin (using the GNU compilers)

If you use Cygwin, you can use the same installation instructions as
for UNIX.  You can either use the GNU compilers, or some native
Windows compilers (it has been tested with cl 2003 and ifort 8.0).

As with a UNIX/Linux install, first obtain all third party source code
and then run the configure script.

A few things to consider:

- If you want to build the AMPL solver `ipopt' with a native
  compiler (not GCC), you need to compile the AMPL solver library
  (ASL) first and then rename (or copy) it to 'amplsolver.a'.  Then,
  when you use the configure script, use the --with-asldir flag to
  tell it where to find this library (as absolute path!) and the
  header files.

- If you want to use native compilers, you need to have the
  environment variables set appropriately.  For example, using the
  Intel Fortran compiler 8.0, I added the line

  call "C:\Program Files\Intel\Fortran\compiler80\IA32\BIN\ifortvars.bat"

  into my cygwin.bat file.

- CUTEr has not been tested

2. Developer Studio:
====================

We also provide project files for using Visual Studio to build an
Ipopt.dll.  Those project files have been generated by Microsoft
Visual Studio 2003 (Standard) with the Intel Fortran 8.0 compiler.

The project files are located in the subdirectories of the
VisualStudio subdirectory (or you can use the solution file
Ipopt/VisualStudio/Ipopt.sln).  Those assume that you download the
following third party components and put them into the same
directories as you would for the UNIX version:

1. blas
   [check the file ...\COIN\Ipopt\OTHERS\blas\INSTALL.BLAS]
2. lapack
   [check the file ...\COIN\Ipopt\OTHERS\lapack\INSTALL.LAPACK]
3. the HSL routines ma27 and mc19
   [check the file ...\COIN\Ipopt\OTHERS\HSL\INSTALL.HSL]

If you want to deviate from this configuration, you will have to adapt
the project file properties, as well as the include file 'config_f.h'
in `...COIN\Ipopt\VisualStudio\include', which sets the Fortran
preprocessor definitions.  For example, if you want to include MA57 in
your build, you need to have the line `#define HAVE_MA57'
(uncommented) in your config_f.h.

The distribution also includes an example for a problem formulated in
Fortran and in C.

However, if those project files do not work for you and you want to
create your own (for example with different Windows C and Fortran
compilers), here is the list of files that need to be included in the
IPOPT library:

From IPOPT/ipopt (Fortran files):

  armijo.f, aug_lag.f, c_out.f, calc_bar.f, calc_nrm.f, check_basis.f,
  check_stop.f, compute_y.f, constr.F, cutalpha.f, dasv2f.f, error.F,
  estimate_ws.F, eval_h_dummy.F, eval_hesscon_v_dummy.F,
  eval_hesslag_v_dummy.F, eval_hessobj_v_dummy.F, filter.F,
  filter_add.f, filter_check.f, find_param.f, get_bb.f, get_c.f,
  get_d.f, get_exactw.f, get_f.f, get_g.f, get_h.f, get_hv.f,
  get_ifix.f, get_lambda.f, get_pz.f, get_pz_cg.f, get_rg.f,
  get_rgb.f, get_rv.f, get_scale.F, get_sigma.f, get_step_full.F,
  get_step_red.f, get_wcorr.f, get_ypy.f, get_zpz.f,
  get_zwzv.f, init_bnd.f, init_mem.f, initparams.F, initpoint.F,
  ipopt.F, iter_out.F, linesearch.f, ma27_call.F, ma28_call.F,
  ma47_call.F, ma48_call.F, ma48sym_call.F, ma57_call.F, mainloop.F,
  mc19_call.F, mc29_call.F, mod_chol.f, new_basis.f, partition.f,
  read_entry.f, reorder_ib.f, reorder_x.f, res_hv.f, resto_filter.F,
  resto_kkt.F, resto_tron.F, slen.f, solve_barrier.F, timer.F,
  update_b.f, update_b_lm.f, update_mpec_eta.f, update_mu.f,
  update_nu.f, wgsmp_call.F, wssmp_call.F

From IPOPT/ipopt (C files):

  ffinite.c ip_malloc.c Ipopt_Interface.c

From BLAS (e.g. www.netlib.org/blas):
  
  d1mach.f, dasum.f, daxpy.f, dcabs1.f, dcopy.f, ddot.f, dgbmv.f,
  dgemm.f, dgemv.f, dger.f, dnrm2.f, drot.f, drotg.f, drotm.f, drotmg.f,
  dsbmv.f, dscal.f, dsdot.f, dspmv.f, dspr.f, dspr2.f, dswap.f, dsymm.f,
  dsymv.f, dsyr.f, dsyr2.f, dsyr2k.f, dsyrk.f, dtbmv.f, dtbsv.f,
  dtpmv.f, dtpsv.f, dtrmm.f, dtrmv.f, dtrsm.f, dtrsv.f, dzasum.f,
  dznrm2.f, idamax.f, lsame.f, xerbla.f

From LAPACK (e.g. www.netlib.org/lapack):

  dgesv.f, dgetf2.f, dgetrf.f, dgetrs.f, dlabad.f, dlacon.f, dlacpy.f,
  dlae2.f, dlaebz.f, dlaev2.f, dlagtf.f, dlagts.f, dlamch.f, dlansp.f,
  dlanst.f, dlapy2.f, dlaqsp.f, dlarf.f, dlarfg.f, dlarnv.f, dlartg.f,
  dlaruv.f, dlascl.f, dlaset.f, dlasr.f, dlasrt.f, dlassq.f, dlaswp.f,
  dlatps.f, dopgtr.f, dopmtr.f, dorg2l.f, dorg2r.f, dppcon.f, dppequ.f,
  dpprfs.f, dppsv.f, dppsvx.f, dpptrf.f, dpptrs.f, drscl.f, dspev.f,
  dspevx.f, dsptrd.f, dstebz.f, dstein.f, dsteqr.f, dsterf.f, ieeeck.f,
  ilaenv.f

From HSL (e.g. from http://www.cse.clrc.ac.uk/nag/hsl/)

  ma27ad.f mc19ad.f

You will also need the include files IPOPT.INC and TIMER.INC from
IPOPT/ipopt, as well as the header files in VisualStudio/include.
(You will need to modify config_f.h if you change which HSL routines
are included in your build.)  Also, make sure that you set your
Fortran compiler options so that the source files are preprocessed.
If you want to build a DLL, you need to define the preprocessor macro
`BUILD_VSDLL' as well.

Ipopt has been build successfully this way using the Compaq Fortran 6
and Microsoft Visual C++ 6.0 compilers.  Here, the calling convention
for the C/C++ compiler was set to "__stdcall" in the C compilers
settings, and the Fortran preprocessor was activated with the FPP
check box in the Fortran compiler settings.

Remark:
=======

Of course, there are many different combinations of specific operating
system versions and native compilers, so that the provided
configuration or project files might not work for you.  (Cygwin with
the GNU compilers should always work, however.)  Corrected or
alternative project files or any other suggestions are always welcome!

$Id: README.Windows 673 2005-06-21 15:00:20Z andreasw $
